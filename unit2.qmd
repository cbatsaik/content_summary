---
title: "Statistical Genetics - Unit 2"
author: "Charles Batsaikhan"
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    theme: cosmo
---



# Introduction

In this unit, we learned how genetic ancestry influences GWAS and PCA can be applied to adjust for population structure. Through journal clubs discussions, simulation studies, lab, and lectures, we examined the challenges caused by confounding, conducted PCA on genetic data, and evaluated the results using few diagnostic tools.

# Key Concepts

- **Genetic Ancestry and Population Structure:** Understanding how genetic variation is distributed across populations.
- **Confounding in GWAS:** Recognizing ancestry as a potential confounder.
- **PCA for Population Structure Inference:** Extracting principal components to capture genetic similarities/differences.
- **Adjusting for Population Structure:** Using PCs as covariates in GWAS to control for confounding.
- **Evaluating Results:** Assessing the number of PCs, interpreting loadings, and using scree plots.
- **Omitted Variable Bias:** Understanding the mathematical proof
- **SNPRelate:** Implementing PCA using an R package designed for genetic data analysis.

# Genetic Ancestry and Population Structure

## Local vs Global Ancestry

- Local Ancestry refers to specific segments of DNA inherited from different ancestral populations.
- Global Ancestry represents the proportion of DNA inherited from various populations across the entire genome.

For example: A genome that is 40% from Population 1 and 60% from Population 2 reflects global ancestry proportions of 0.40 and 0.60.

Challange: Determining the ancestral origin of genetic segments is difficult without robust comparison data.

# Principle Component Analysis (PCA)

PCA is a dimension reduction techniques that indentifies linear combinations of SNPs to capture the most variance in the data. PCs often reflect population structure.

**Mathematical Formulation**: $$PC_k=\sum^p_{j=1}a_{kj}X_j$$ Where:

- $PC_k$= Principle Component K
- $a_{kj}=$ Loading coefficient for SNP j in PC k
- $X_j=$ SNP j value


## Performing PCA in R
```{r}
library(tidyverse)
library(GGally)

# Load data
pcadata <- read_csv('https://mac-stat.github.io/statgen/data/pca_toy_data.csv')

# Perform PCA
geno <- pcadata %>% select(-population, -trait)
pca_out <- prcomp(geno, center = TRUE, scale = TRUE)
pca_scores <- pca_out$x
```

## Visualzing PCA results

```{r}
pca_scores_df <- as.data.frame(pca_scores) %>%
  mutate(population = pcadata$population)

ggplot(pca_scores_df, aes(x = PC1, y = PC2, color = as.factor(population))) +
  geom_point(alpha = 0.7, size = 2) +
  labs(title = "PC1 vs. PC2 Scores", color = "Population") +
  theme_minimal()
```
This is the Score plot. This tells us...

# Evaluating PCA Results Efficiently

## SNPRelate Package

SNPRelate is a powerful R package designed for analyzing large-scale genomic datasets efficiently. It is widely used for performing Principal Component Analysis (PCA), kinship analysis, Linkage Disequilibrium (LD) pruning, and other genetic association studies. This package is particularly beneficial in genome-wide association studies (GWAS) where population structure can act as a confounder, leading to spurious associations.

Loading the library and exploring the tutorial
```{r}
library(SNPRelate)
vignette("SNPRelate", package = "SNPRelate")
```

SNPRelate uses Genomic Data Structure (GDS) files for efficient data storage. For example, 279 individuals with sample IDs stored as sample.id, and 9088 SNPs with SNP information like position, chromosomes, and genotypes.
```{r}
genofile <- snpgdsOpen(snpgdsExampleFileName())
genofile

snpgdsClose(genofile)
```

We can extract population information. (1) CEU: Utah resient of European ancestry. (2) HCB: Han Chinese in Beijing. (3) JPT: Japanese in Tokyo. (4) YRI: Yoruba from Nigeria.
```{r}
genofile <- snpgdsOpen(snpgdsExampleFileName())
pop_code <- read.gdsn(index.gdsn(genofile, "sample.annot/pop.group"))
table(pop_code)
snpgdsClose(genofile)
```

Linkage Disequilibrium pruning is a pre-processing step that removes highly correlated SNPs to reduce redundancy and imporve computational efficiency.
```{r}
genofile <- snpgdsOpen(snpgdsExampleFileName())
set.seed(494)
snpset <- snpgdsLDpruning(genofile, ld.threshold = 0.2)
snpset.id <- unlist(snpset)
length(snpset.id)
snpgdsClose(genofile)
```
- **6,457 SNPs** remain from the original 9,088.

We can now run **PCA** on the LD-pruned SNPs.

```{r}
genofile <- snpgdsOpen(snpgdsExampleFileName())
pca <- snpgdsPCA(genofile, snp.id = snpset.id, num.thread = 2)
snpgdsClose(genofile)
```

- **Eigenvalues and Eigenvectors** are calculated to represent the principal components (PCs), and SNPRelate can compute up to 32 PCs using an very efficient algorithms.

## Visualizing SNPRelate PCA Results


Below is the **Score plot** of the first two PCs:
```{r}
genofile <- snpgdsOpen(snpgdsExampleFileName())
sample.id <- read.gdsn(index.gdsn(genofile, "sample.id"))

tab <- data.frame(
  sample.id = pca$sample.id,
  pop = factor(pop_code)[match(pca$sample.id, sample.id)],
  EV1 = pca$eigenvect[, 1],
  EV2 = pca$eigenvect[, 2]
)

plot(tab$EV2, tab$EV1, col = as.integer(tab$pop), pch = 19,
     xlab = "PC2", ylab = "PC1", main = "PCA Score Plot")
legend("bottomright", legend = levels(tab$pop), col = 1:nlevels(tab$pop), pch = 19)
snpgdsClose(genofile)
```

- You can see that populations tend to from distinct clusters, and the first 2 PCs capture most of the populations structure.


This plot is called the **parallel coordinates plot** and it compares the top 16 PCs for each individual across different populations. Similar patterns within populations indicate shared genetic structure.
```{r}
genofile <- snpgdsOpen(snpgdsExampleFileName())
library(MASS)
parcoord(pca$eigenvect[, 1:16], col = as.integer(factor(pop_code)))
snpgdsClose(genofile)
```

The **Loadings Plot** shows which SNPs contribute to most to each PC. As you can see from the below plot, that SNP2 has the greatest affect to PC1.
```{r}
genofile <- snpgdsOpen(snpgdsExampleFileName())
snp_load <- snpgdsPCASNPLoading(pca, genofile, num.thread = 1L, verbose = TRUE)
plot(abs(snp_load$snploading[,1]), type = "h",
     main = "SNP Loadings for PC1",
     xlab = "SNPs",
     ylab = "Absolute Loading")
snpgdsClose(genofile)
```


A **scree plot** helps determine how many PCs are necessary to capture the majority of variance.

```{r}
genofile <- snpgdsOpen(snpgdsExampleFileName())
# Perform PCA using SNPRelate
pca <- snpgdsPCA(genofile, num.thread = 2)

# Calculate variance explained
pc.percent <- pca$varprop * 100

# Plot the scree plot
plot(pc.percent, type = "b",
     xlab = "Principal Component",
     ylab = "Percent Variance Explained",
     main = "Scree Plot using SNPRelate")

# Close the GDS file
snpgdsClose(genofile)

```

- PC1 captures the largest proportion of variance
- The variance explained deceases with each subsequent PC.


## Evaluating PCA Results

So coming back to evaluating PCA results, many useful plot function from the SNPRelate package does a great job evaluation of PCA.

- Score Plot Interpretation: The distinct clustering in the score plot suggests that the top PCs capture population structure.
- Parallel Coordinates Plot: Consistent patterns within populations validate the PCA in detecting structure.
- Loadings Plot: Identifies SNPs contributing to genetic differences between populations.
- Scree Plot: Guides selection of the number of PCs by identifying the point where the variance explained plateaus.


## For choosing the number of PCs

PCs that capture minimal variance may not significantly contribute to the analysis, and including too many PCs may introduce noise, while too few may fail to capture important structure.


# Confounding and Bias in GWAS

In a GWAS, confounding can occur when genetic ancestry affects both the genotype and the phenotype. For instance, consider a study investigating the association between a specific SNP and a disease. If the SNP has different allele frequencies across populations and the disease prevalence also varies by ancestry due to environmental or lifestyle factors, then ancestry becomes a confounder.

```{r}
library(tidyverse)
library(ggdag)
library(dagitty)
dag_conf <- dagitty('
dag {
  Ancestry -> Genotype
  Ancestry -> Trait
  Genotype -> Trait
}
')

ggdag(dag_conf) +
  theme_minimal() +
  labs(title = "Ancestry as a Confounder")
```

**Ancestry influences both the SNP and the Trait, and this leads to confounding.**

This is a **R Code** for adjusting for Confounding using PCA:

```{r}
pc1 <- pca_scores[, "PC1"]
model <- lm(trait ~ SNP1 + pc1, data = pcadata)
summary(model)
```

This adjustment helps reduce the confounding effect by incorporating the first principal component as a covariate.




**Collider Example**:

A collider occurs when a variable is influenced by both the genotype and the trait. For example, suppose cholesterol levels are influenced by both smoking status (predictor) and body weight (outcome). If cholesterol levels are controlled for in the analysis, it could introduce a spurious association between smoking and body weight.

```{r}
collider_dag <- dagify(
  Smoking ~ Cholesterol,
  Weight ~ Cholesterol,
  labels = c("Smoking" = "Smoking", "Weight" = "Weight", "Cholesterol" = "Cholesterol"),
  exposure = "Smoking",
  outcome = "Weight"
)
ggdag_classic(collider_dag)
```

**By adjusting for the collider, a false association between smoking and weight may be introduced.** So, key takeaways are: (1) Adjust for confounders to reduce bias. (2) Avoid adjusting for colliders as it can introduce false associations.


# Omitted Variable Bias

Omitted variable bias occurs when a relevant variable is excluded form a regression model and leading to biased and inconsistent estimates of the regression coefficients. 

This is a linear model: $$Y=X\beta+Z\gamma +\epsilon$$, Where

- $Y$ is the outcome variable
- $X$ is the independent variable
- $Z$ is an omitted confounder
- $\beta$ is the coefficient for $X$
- $\gamma$ is the coefficient for $Z$
- $\epsilon$ is the error term with $E[\epsilon]=0$

Now, we supppose we mistakenly fit the following model, excluding $Z$:
$$Y=X\hat{\beta} +u$$, Where:

- $\hat{\beta}$ is the biased estimator of $\beta$
- $u=Z\gamma +\epsilon$ is the composite error term

We can write the OLS estimate for $\hat{\beta}$ as:
$$\hat{\beta}=(X^TX)^{-1}X^TY$$

If we substitute the true model into this equation:
$$\hat{\beta}=(X^TX)^{-1}X^T(X\beta+Z\gamma +\epsilon)=\beta+(X^TX)^{-1}X^TZ\gamma +(X^TX)^{-1}X^TE[\epsilon]$$

since $E[\epsilon]=0$,

$$E[\hat{\beta}]=\beta+(X^TX)^{-1}X^TZ\gamma$$

- **If X and Z are correlated, the bias will be non-zero**
- **The magnitude and direction of the bias depend on both the strength of the correlation between X and Z and the effect of Z on Y**
- **If X and Z are uncorrelated, the bias will be 0**


# Adjusting for Population Structure in GWAS

To adjust for population structure, we can include PCs as covariates in the GWAS model:

$$E[Y|X_j, \pi]=\alpha+\beta_j X_j +\gamma \pi$$ Where:

- $Y$ is the trait
- $X_j$=SNP j value
- $\pi$=Genetic ancestry estimate



```{r}
pc1 <- pca_scores[, "PC1"]
model <- lm(trait ~ SNP1+pc1, data=pcadata)
summary(model)
```



# Journal Clubs

## Journal Club 4: "What is Ancestry?"

This paper talks about the complex and often misunderstood concept of ancestry in the context of genetics. Mathieson and Scally argue that genetic ancestry is not fixed identity or a clean label but rather a statement about shared segments of inherited DNA. Importantly, they distinguish genealogical ancestry from genetic ancestry. Since DNA is reshuffled via recombination each generation, we inherit only fragments from many ancestors, and not necessarily from all of them.

Some Key Takeaways:

- Ancestry is not categorical: any attempt to box people into rigid population labels is both scientifically misleading and ethically wrong.
- Discussions of ancestry must balance scientific accuracy with social responsibility. Misinterpretations can lead to oversimplified or even harmful narratives about identity and race.
- The paper raises concerns about combining genetic similarity with identity categories and emphasizing that the importance of transparent, careful communication when reporting genetic ancestry.


## Journal Club 5: "Genes Mirror Geography Within Europe"

This study applies PCA to European genetic data and shows a stunning result: when plotted, the top PCs align geographically with a map of Europe. PC1 captures a northwest-to-southeast, and PC2 captures a northeast-to-southwest. That is the genetic varaition across Europe.

Some Key Takeaways:

- PCA effectively picks up on population structure, even subtle differences due to historical migration.
- Study shows that there is no sharp boundary between populations. Genetic variation exists along gradients.
- This study suggested that phenotype differences correlated with geography could produce spurious associations in GWAS if population structure is not adjusted for.


## Journal Club 6: "SVMs for Genetic Ancestry"

This paper talked about how machine learning and model-based methods are used to infer ancestry from genotype data. Tools like PCA, Random Forests, and SVMs, as well as Bayesian models.

- SVMs and PCA can be useful for classification and visualization of ancestry, but genetic ancestry does not equal to race/ethnicity.
- Inference can become ethically complicated when individuals who self-identify as mixed race are excluded.

Additionally, the paper notes that phenotypic traits can also correlate with geography, so failing to control for population structure could lead to confoudning in GWAS.

